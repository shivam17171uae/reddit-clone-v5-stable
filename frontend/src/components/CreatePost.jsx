import React, { useState, useEffect } from 'react'; import { useAuth } from '../context/AuthContext';
function CreatePost({ onPostCreated, initialCommunity = '' }) { const [postType, setPostType] = useState('text'); const [title, setTitle] = useState(''); const [content, setContent] = useState(''); const [url, setUrl] = useState(''); const [imageFile, setImageFile] = useState(null); const [imagePreview, setImagePreview] = useState(''); const [selectedCommunity, setSelectedCommunity] = useState(''); const [communities, setCommunities] = useState([]); const [isSubmitting, setIsSubmitting] = useState(false); const { token } = useAuth(); useEffect(() => { const fetchCommunities = async () => { const res = await fetch('/api/communities'); const data = await res.json(); setCommunities(data); if (initialCommunity) { const community = data.find(c => c.name === initialCommunity); if (community) setSelectedCommunity(community.id); } else if (data.length > 0) { setSelectedCommunity(data[0].id); } }; fetchCommunities(); }, [initialCommunity]); const handleFileChange = (e) => { const file = e.target.files[0]; if (file) { setImageFile(file); setImagePreview(URL.createObjectURL(file)); } }; const resetForm = () => { setTitle(''); setContent(''); setUrl(''); setImageFile(null); setImagePreview(''); }; const handleSubmit = async (e) => { e.preventDefault(); if (!title.trim() || !selectedCommunity) return; setIsSubmitting(true); let finalImageUrl = ''; if (postType === 'image' && imageFile) { const formData = new FormData(); formData.append('image', imageFile); try { const uploadRes = await fetch('/api/upload', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` }, body: formData }); if (!uploadRes.ok) throw new Error('Image upload failed'); const uploadData = await uploadRes.json(); finalImageUrl = uploadData.imageUrl; } catch (err) { setIsSubmitting(false); return; } } const postData = { title, community_id: selectedCommunity, post_type: postType, content: postType === 'text' ? content : '', url: postType === 'link' ? url : '', image_url: finalImageUrl, }; try { const postRes = await fetch('/api/posts', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(postData) }); if (postRes.ok) { resetForm(); onPostCreated(); } else { throw new Error('Failed to create post'); } } catch (err) {} finally { setIsSubmitting(false); } }; if (communities.length === 0) return <div className="bg-gray-800 p-4 rounded-lg mb-4 text-center text-gray-400">Create a community to start posting!</div>; return ( <form onSubmit={handleSubmit} className="bg-gray-800 p-4 rounded-lg shadow-lg mb-4"> <div className="flex border-b border-gray-700 mb-4"> {['text', 'image', 'link'].map(type => <button type="button" key={type} onClick={() => setPostType(type)} className={`px-4 py-2 font-semibold ${postType === type ? 'border-b-2 border-orange-500 text-white' : 'text-gray-400'}`}>{type.charAt(0).toUpperCase() + type.slice(1)}</button>)} </div> <select value={selectedCommunity} onChange={e => setSelectedCommunity(e.target.value)} className="w-full bg-gray-700 p-2 rounded mb-2"> <option value="">Select Community</option> {communities.map(c => <option key={c.id} value={c.id}>{c.name}</option>)} </select> <input type="text" placeholder="Title" value={title} onChange={e => setTitle(e.target.value)} className="w-full bg-gray-700 p-2 rounded mb-2" required /> {postType === 'text' && <textarea placeholder="Content (Markdown supported)" value={content} onChange={e => setContent(e.target.value)} className="w-full bg-gray-700 p-2 rounded mb-2" rows="5"></textarea>} {postType === 'image' && ( <div className="border-2 border-dashed border-gray-600 rounded-lg p-4 text-center"> <input type="file" accept="image/png, image/jpeg, image/gif" onChange={handleFileChange} className="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100" /> {imagePreview && <img src={imagePreview} alt="Preview" className="mt-4 max-h-48 mx-auto rounded" />} </div> )} {postType === 'link' && <input type="url" placeholder="Link URL" value={url} onChange={e => setUrl(e.target.value)} className="w-full bg-gray-700 p-2 rounded mb-2" />} <button type="submit" disabled={isSubmitting} className="w-full bg-orange-600 hover:bg-orange-700 font-bold py-2 px-4 rounded mt-4 disabled:bg-gray-500">{isSubmitting ? 'Posting...' : 'Post'}</button> </form> );}
export default CreatePost;
