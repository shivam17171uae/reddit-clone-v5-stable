import React, { createContext, useState, useContext, useEffect, useCallback } from 'react'; import { useAuth } from './AuthContext';
const NotificationContext = createContext(null);
export const NotificationProvider = ({ children }) => { const [notifications, setNotifications] = useState([]); const [ws, setWs] = useState(null); const { token } = useAuth(); const fetchNotifications = useCallback(async () => { if (!token) return; try { const res = await fetch('/api/notifications', { headers: { 'Authorization': `Bearer ${token}` } }); setNotifications(await res.json()); } catch (e) {} }, [token]); useEffect(() => { if (!token) { if (ws) ws.close(); return; } fetchNotifications(); const socket = new WebSocket(`ws://${window.location.host}/socket?token=${token}`); setWs(socket); socket.onmessage = (event) => { const message = JSON.parse(event.data); if (message.type === 'NEW_NOTIFICATION') { setNotifications(prev => [message.payload, ...prev]); } }; return () => { socket.close(); }; }, [token, fetchNotifications]); const markAllAsRead = async () => { if (!token) return; try { await fetch('/api/notifications/read', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` } }); setNotifications(prev => prev.map(n => ({ ...n, is_read: true }))); } catch (e) {} }; return (<NotificationContext.Provider value={{ notifications, markAllAsRead }}>{children}</NotificationContext.Provider>);};
export const useNotifications = () => useContext(NotificationContext);
